# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WIDAL-PMhDLOGvYKN4SkrYpzVzJ3CHXC
"""

import pandas as pd
import numpy as np
import requests
import re

df = pd.read_json('https://greendeck-datasets-2.s3.amazonaws.com/netaporter_gb_similar.json', lines=True)

oid_col = ['_id', 'website_id']
for col in oid_col:
  temp = pd.DataFrame(list(df[col]))
  df[col] = temp['$oid']

df.head()

# brand = list(df.brand.head())
df['brand'] = [brand['name'] for brand in list(df.brand)]
df.head()

# df.media.head()

# df.price.head(10)

"""## Question 1"""

price_df = pd.DataFrame(list(df['price']))
price_df.head()

# df[df[['SELECTIO']].applymap(np.isreal).all(1)]
# for cols in price_df.columns:
#   price_df[cols] = price_df[cols].str.extract('(\d*\.\d+|\d+)', expand=False).astype(float)
# price_df.head()

# price_df.info()

# price_df['offer_price'].head()

offer_list = []
regular_list = []
basket_list = []
for offer, regular, basket in zip(price_df['offer_price'], price_df['regular_price'], price_df['basket_price']):
  offer_list.append(offer['value'])
  regular_list.append(regular['value'])
  basket_list.append(basket['value'])
price_df['offer_price'] = pd.Series(offer_list)
price_df['regular_price'] = pd.Series(regular_list)
price_df['basket_price'] = pd.Series(basket_list)
price_df.head()

df = pd.concat([df, price_df], axis=1)
df.head()

# price_df.info()

# price_df['id'] = df['_id']
# price_df.set_index('id', inplace=True)

# price_df.head(5)

df['discount_price'] = df['regular_price'] - df['offer_price']
df.head()

"""## Question 2"""

# list(df.similar_products)[:1]
# for item in df.similar_products:
#   print(item['meta']['min_price'])
#   print(item['website_results'].keys())
#   break

# df.brand.tail(10)

# price_df.reset_index(inplace=True)
# price_df['brand'] = df['brand']
# price_df.head()

discount_by_brand = df.groupby('brand').mean()
discount_by_brand.head()

discount_by_brand.info()

# price_df.brand.value_counts()

# df.columns

# df.website_id.value_counts()



"""## Question 3
### NAP products where they are selling at a price higher than any of the competition.
"""

expensive_list=[]
price_list=[]
for item, basket in zip(df.similar_products, df.basket_price):
  # print(item, basket)
  temp_list = []
  temp_price=[]
  # print(item['meta'])
  comp_id = list(item['website_results'].keys())
  for val in item['website_results'].keys():
    if item['website_results'][val]['meta']['total_results'] == 1:
      # print('Yes')
      temp = item['website_results'][val]['meta']['min_price']['basket']
      if basket > temp:
        temp_list.append(val)
        temp_price.append(temp)
    # print(item['website_results'][val]['meta']['max_price'])
  expensive_list.append(temp_list)
  price_list.append(temp_price)

df['expensive_id'] = pd.Series(expensive_list)
df['comp_basket_price'] = pd.Series(price_list)
df.head()

# final_list = []
# for item, basket in zip(df.similar_products, price_df.basket_price):
#   temp_list = []
#   # print(item['website_results'].values())
#   for val in item['website_results'].keys():
#     if item['website_results'][val]['meta']['total_results'] == 1:
#       if basket > item['website_results'][val]['meta']['min_price']['basket']:
#         temp_list.append(val)
#   print(temp_list)
#   final_list.append(temp_list)
# # print(final_list)

df.head()

"""## Question 4
### NAP products where they are selling at a price n% higher than a competitor X.
"""

# higher_list = []
# for item, basket in zip(df.similar_products, price_df.basket_price):
#   # print(item, basket)
#   temp_list = []
#   # print(item['meta'])
#   for val in item['website_results'].keys():
#     if item['website_results'][val]['meta']['total_results'] == 1:
#       # print('Yes')
#       if (basket+(basket/10)) > item['website_results'][val]['meta']['min_price']['basket']:
#         temp_list.append(val)
#     # print(item['website_results'][val]['meta']['max_price'])
#   higher_list.append(temp_list)

df.expensive_id = df.expensive_id.apply(lambda x: [0] if len(x)==0 else x)
df.comp_basket_price = df.comp_basket_price.apply(lambda x : [0] if len(x)==0 else x)
df.head()

# price_df.assign(cids=price_df['expensive_id']).explode('5d').reset_index(drop=True)
price_df2 = pd.DataFrame(df['expensive_id'].tolist(), index=df.index).stack()
comp_basket_price = pd.DataFrame(df['comp_basket_price'].tolist(), index=df.index).stack()
print(price_df2.head())
print(comp_basket_price.head())

price_df2.head(101)

len(price_df2)

price_df2.index = price_df2.index.droplevel(1)
comp_basket_price.index = comp_basket_price.index.droplevel(1)
print(price_df2.head())
print(comp_basket_price.head())

df = pd.concat([df, price_df2, comp_basket_price], axis=1)
df.head()

df.reset_index(inplace=True)
df.drop('index', inplace=True, axis=1)
df.head()

df.rename(columns={0:'comp_website_id', 1:'basket_price_comp'}, inplace=True)
df.head()

# price_data['basket_fluctuation_price'] = [(price_data['basket_price'] - price_data['basket_price_comp'])/price_data['basket_price_comp'] if price_data['basket_price_comp']!=0 else 0]
# price_data.head()
df['basket_fluctuation_price'] = np.where(df['basket_price_comp'] != 0, (df['basket_price']-df['basket_price_comp'])/df['basket_price_comp'], 0)
df.head()

# price_data['basket_fluctuation_price'] = price_data.apply(lambda x : (x['basket_price']-x['basket_price_comp'])/x['basket_price_comp'] if x['basket_price_comp'] != 0 else 0)
# price_data.head()



